package com.coll.OnlineCollaborateBackEnd.controller;

import java.io.File;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.PropertySource;
import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.coll.OnlineCollaborateBackEnd.dao.IUserDAO;
import com.coll.OnlineCollaborateBackEnd.model.Response;

@RestController
//@RequestMapping("/upload")
@PropertySource("classpath:config.properties")
public class ImageUploadController {
	@Autowired 
	IUserDAO userDAO;
	
	@Value("${imageBasePath}")
	private String imageBasePath;
	
	@PostMapping("/upload/profile-picture")
	public ResponseEntity<Response> uploadProfilePicture(@RequestParam("file") MultipartFile file, @RequestParam("id") Long id) {
		
		String message = null;

		// We would be using the USER_PROFILE as a prefix so that we can use other prefix 
		// for other kind of upload such as event which may have id auto-generated
		String fileName = "USER_PROFILE_" + id + ".png";			
		
		if(uploadFile(imageBasePath, fileName, file)){

			// update the picture id in the database table by using userDAO
			userDAO.updateUserPictureId(fileName, id);
			
			//in the response the filename of the new image will be send			
			return new ResponseEntity<Response>(new Response(1,fileName),HttpStatus.OK);			
		}
		else {
			message = "Failed to update the profile picture!";
			return new ResponseEntity<Response>(new Response(0,message),HttpStatus.NOT_FOUND);
		}		
		
	}
	
private boolean uploadFile(String directory, String fileName,  MultipartFile file) {		
		
		// Create the directory if does not exists
		if(!new File(directory).exists()) {
			new File(directory).mkdirs();
		}		
		
		try {			
			// transfer the file
			file.transferTo(new File(directory + fileName));
			// file uploaded successfully 
			return true;
		}
		catch(Exception ex) {
			ex.printStackTrace();
		}
				
		return false;				
	}
	
	//To resolve ${} in @Value
    @Bean
    public static PropertySourcesPlaceholderConfigurer propertyConfigInDev() {
        return new PropertySourcesPlaceholderConfigurer();
    }   
		
	

}
