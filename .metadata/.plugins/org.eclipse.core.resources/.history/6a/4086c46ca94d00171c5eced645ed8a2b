package com.coll.OnlineCollaborateBackEnd.config;


import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.transaction.annotation.EnableTransactionManagement;
import org.springframework.web.multipart.MultipartResolver;
import org.springframework.web.multipart.commons.CommonsMultipartResolver;
import org.springframework.web.servlet.ViewResolver;
import org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
import org.springframework.web.servlet.mvc.WebContentInterceptor;
import org.springframework.web.servlet.view.InternalResourceViewResolver;
@Configuration
@EnableTransactionManagement
@EnableWebMvc
@ComponentScan("com.coll.OnlineCollaborateBackEnd")
public class MvcConfig extends WebMvcConfigurerAdapter {

    // Configuration to load the static resources   
    @Override
     public void addResourceHandlers(ResourceHandlerRegistry registry) {
        registry.addResourceHandler("/resources/**").addResourceLocations("/resources/");
     }

     // Configuration for view resolver
     @Bean
     public ViewResolver configureViewResolver() {
         InternalResourceViewResolver viewResolve = new InternalResourceViewResolver();
         viewResolve.setPrefix("/WEB-INF/views/");
         viewResolve.setSuffix(".jsp");

         return viewResolve;
     }

     // Use the DefaultServletHandlerConfigurer 
     @Override
     public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer){
       configurer.enable();
     }  
     //No cache interceptor
     @Bean
     public WebContentInterceptor webContentInterceptor() {
       WebContentInterceptor interceptor = new WebContentInterceptor();
       interceptor.setCacheSeconds(0);
       interceptor.setUseExpiresHeader(true);
       interceptor.setUseCacheControlHeader(true);
       interceptor.setUseCacheControlNoStore(true);

       return interceptor;
     }
     //Multipart resolver bean for file upload
     @Bean
     public MultipartResolver multipartResolver() {
         return new CommonsMultipartResolver();
     }	
     
     @Override
     public void addInterceptors(InterceptorRegistry registry) {
       registry.addInterceptor(webContentInterceptor());
     }
}
