package com.coll.OnlineCollaborateBackEnd.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.coll.OnlineCollaborateBackEnd.dao.IUserDAO;
import com.coll.OnlineCollaborateBackEnd.model.User;

@RestController
@CrossOrigin(origins="http://localhost:8887")
@RequestMapping("/user")
public class UserController {
	
	@Autowired
	IUserDAO userDAO;
	
	//Adding User(Registration)
	@PostMapping(value="/add")
	public ResponseEntity<User> register(@RequestBody User user){
		// setting the value of status, enable, online, profile
		user.setStatus("PENDING");
		user.setEnabled(true);
		user.setOnline(false);
		user.setProfile("noDp.png");
		if(userDAO.addUser(user)) {
			System.out.println(user);
			user.setResponseMessage("You have successfully posted data to the server");
			return new ResponseEntity<User>(user,HttpStatus.OK);
		}
		else {
			return new ResponseEntity<User>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	//Login
	@PostMapping(value = {"/login"})
	public ResponseEntity<User> login(@RequestBody User user) {
	
		if(user.getUsername() != null && user.getPassword() != null) {
			if(userDAO.validateUser(user) == null) {
				user = new User();
				user.setResponseCode(204);
				user.setResponseMessage("Invalid Credentials");
				return new ResponseEntity<User>(user, HttpStatus.NO_CONTENT);
			} else {
				user = userDAO.getUserByUserName(user.getUsername());
				Boolean status = Boolean.valueOf("true");
				user.setOnline(status);
				user.setResponseCode(200);
				user.setResponseMessage("Login Successful!");
				userDAO.updateUser(user);
				return new ResponseEntity<User>(user, HttpStatus.OK);
			}
			
		} else {
			user = new User();
			return new ResponseEntity<User>(user, HttpStatus.NO_CONTENT);
		}
	}

	
	//Retrieving single user
	 @GetMapping(value = "/view/{id}")
	    public ResponseEntity<User> getUser(@PathVariable("id") int id) {
	        System.out.println("Retrieving User with id " + id);
	        User user = userDAO.getUser(id);
	        if (user == null) {
	            System.out.println("User with id " + id + " not found");
	            return new ResponseEntity<User>(HttpStatus.NOT_FOUND);
	        }
	        else{
	        	user.setResponseMessage("Success");
	        	return new ResponseEntity<User>(user, HttpStatus.OK);
	        }
	    }
	 
	//Retrieving single user
		 @GetMapping(value = "/view/{username}")
		    public ResponseEntity<User> getUser(@PathVariable("username") String username) {
		        System.out.println("Retrieving User with username " + username);
		        User user = userDAO.getUserByUserName(username);
		        if (user == null) {
		            System.out.println("User with username " + username + " not found");
		            return new ResponseEntity<User>(HttpStatus.NOT_FOUND);
		        }
		        else{
		        	user.setResponseMessage("Success");
		        	return new ResponseEntity<User>(user, HttpStatus.OK);
		        }
		    }
	
	//Retrieving all users
	@GetMapping(value="/view")
	public ResponseEntity<User> getAllUsers()
    {
          return new ResponseEntity(userDAO.getAllUsers(),HttpStatus.OK);
    }
	
	@PostMapping(value="/check-username")
	public ResponseEntity<Void> checkUsername(@RequestBody String username) {			
		User user = userDAO.getUserByUserName(username);
		if(user == null) {
			return new ResponseEntity<Void>(HttpStatus.NOT_FOUND);
		}
		else {
			return new ResponseEntity<Void>(HttpStatus.OK);
		}			
	}
	
	
	
	@PostMapping(value="/logout")
	public ResponseEntity<User> logout(@RequestBody User user) {			
		user = new User();
		user.setResponseMessage("Successfully Logged in");
		return new ResponseEntity<User>(user,HttpStatus.OK);
					
	}

}
